{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/app/actions.ts"],"sourcesContent":["'use server';\n\nconst BACKEND_URL = process.env.BACKEND_API_URL || 'http://127.0.0.1:5001'; // Default backend URL\n\n// This is the server action that will be called from the client component.\nexport async function startDocumentationProcess(repoUrl: string): Promise<{ job_id: string } | { error: string }> {\n  console.log(`[Server Action] Triggering backend documentation for: ${repoUrl}`);\n\n  try {\n    const response = await fetch(`${BACKEND_URL}/document`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ repoUrl }), // Send repoUrl in the body\n      cache: 'no-store', // Ensure fresh request\n    });\n\n    const result = await response.json();\n\n    if (!response.ok) {\n      // If response is not OK, throw an error with the message from the backend\n      console.error(`Backend Error (${response.status}): ${result.error || 'Unknown error'}`);\n      return { error: `Backend Error: ${result.error || response.statusText || 'Failed to start process'}` };\n    }\n\n    console.log('[Server Action] Backend responded:', result);\n    // Assuming the backend returns { job_id: \"...\", status: \"...\", message: \"...\" } on success (202)\n    if (result.job_id) {\n       return { job_id: result.job_id };\n    } else {\n       console.error('Backend did not return a job_id');\n       return { error: 'Backend did not return a job ID.' };\n    }\n\n  } catch (error) {\n    console.error('[Server Action] Error calling backend:', error);\n     const errorMessage = error instanceof Error ? error.message : 'Network error or backend unreachable.';\n     // Check for fetch-specific errors like ECONNREFUSED\n     if (errorMessage.includes('ECONNREFUSED') || errorMessage.includes('fetch failed')) {\n        return { error: `Could not connect to the backend service at ${BACKEND_URL}. Is it running?` };\n     }\n     return { error: `Failed to communicate with backend: ${errorMessage}` };\n  }\n}\n\n\n// --- New Server Actions for History/Status ---\n\nexport type ExecutionStatus = 'pending' | 'running' | 'completed' | 'failed';\n\nexport interface ExecutionHistoryItem {\n  job_id: string; // Matches backend field name\n  repo_url: string; // Matches backend field name\n  start_time: string; // Keep as string for transfer\n  end_time?: string; // Keep as string for transfer\n  status: ExecutionStatus;\n  details?: string;\n  final_state_summary?: {\n     documentation_plan?: any[]; // Adjust types as needed\n     summary_status?: string;\n  };\n}\n\n\nexport async function fetchExecutionHistory(): Promise<ExecutionHistoryItem[] | { error: string }> {\n  console.log('[Server Action] Fetching execution history from backend');\n  try {\n    const response = await fetch(`${BACKEND_URL}/history`, {\n       method: 'GET',\n       cache: 'no-store', // Ensure fresh data\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n       console.error(`Backend Error (${response.status}): ${data.error || 'Unknown error'}`);\n       return { error: `Backend Error: ${data.error || response.statusText || 'Failed to fetch history'}` };\n    }\n\n    // Basic validation if needed\n    if (!Array.isArray(data)) {\n        console.error('Backend returned non-array for history:', data);\n        return { error: 'Invalid history format received from backend.' };\n    }\n\n    // Convert snake_case from Python to camelCase for TypeScript if necessary\n    // Or adjust the frontend component to expect snake_case\n    // For simplicity, let's assume the component handles snake_case for now.\n    return data as ExecutionHistoryItem[];\n\n  } catch (error) {\n    console.error('[Server Action] Error fetching history:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Network error or backend unreachable.';\n    if (errorMessage.includes('ECONNREFUSED') || errorMessage.includes('fetch failed')) {\n       return { error: `Could not connect to the backend service at ${BACKEND_URL}. Is it running?` };\n    }\n    return { error: `Failed to fetch history: ${errorMessage}` };\n  }\n}\n\nexport async function fetchJobStatus(jobId: string): Promise<ExecutionHistoryItem | { error: string }> {\n  console.log(`[Server Action] Fetching status for job: ${jobId}`);\n   if (!jobId) return { error: 'Job ID is required.'};\n\n  try {\n    const response = await fetch(`${BACKEND_URL}/status/${jobId}`, {\n      method: 'GET',\n      cache: 'no-store', // Ensure fresh data\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n       console.error(`Backend Error (${response.status}): ${data.error || 'Unknown error'}`);\n       if (response.status === 404) {\n           return { error: `Job with ID ${jobId} not found.` };\n       }\n       return { error: `Backend Error: ${data.error || response.statusText || 'Failed to fetch status'}` };\n    }\n\n     // Assume data matches ExecutionHistoryItem structure (with snake_case)\n    return data as ExecutionHistoryItem;\n\n  } catch (error) {\n    console.error('[Server Action] Error fetching job status:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Network error or backend unreachable.';\n     if (errorMessage.includes('ECONNREFUSED') || errorMessage.includes('fetch failed')) {\n        return { error: `Could not connect to the backend service at ${BACKEND_URL}. Is it running?` };\n     }\n    return { error: `Failed to fetch status for job ${jobId}: ${errorMessage}` };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {startDocumentationProcess as '4099dec9ca4b5f29ed4b2d009a808d0c97091e0eb4'} from 'ACTIONS_MODULE0'\nexport {fetchExecutionHistory as '00beabad38ad658c9c148e71efece76e2808b67897'} from 'ACTIONS_MODULE0'\nexport {fetchJobStatus as '408ab15764d405b369f2567d9ff97da58a60f1da1a'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}