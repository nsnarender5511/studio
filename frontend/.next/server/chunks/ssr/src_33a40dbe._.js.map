{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 362, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/app/actions.ts"],"sourcesContent":["'use server';\n\nconst BACKEND_URL = process.env.BACKEND_API_URL || 'http://127.0.0.1:5001'; // Default backend URL\n\n// This is the server action that will be called from the client component.\nexport async function startDocumentationProcess(repoUrl: string): Promise<{ job_id: string } | { error: string }> {\n  console.log(`[Server Action] Triggering backend documentation for: ${repoUrl}`);\n\n  try {\n    const response = await fetch(`${BACKEND_URL}/document`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ repoUrl }), // Send repoUrl in the body\n      cache: 'no-store', // Ensure fresh request\n    });\n\n    const result = await response.json();\n\n    if (!response.ok) {\n      // If response is not OK, throw an error with the message from the backend\n      console.error(`Backend Error (${response.status}): ${result.error || 'Unknown error'}`);\n      return { error: `Backend Error: ${result.error || response.statusText || 'Failed to start process'}` };\n    }\n\n    console.log('[Server Action] Backend responded:', result);\n    // Assuming the backend returns { job_id: \"...\", status: \"...\", message: \"...\" } on success (202)\n    if (result.job_id) {\n       return { job_id: result.job_id };\n    } else {\n       console.error('Backend did not return a job_id');\n       return { error: 'Backend did not return a job ID.' };\n    }\n\n  } catch (error) {\n    console.error('[Server Action] Error calling backend:', error);\n     const errorMessage = error instanceof Error ? error.message : 'Network error or backend unreachable.';\n     // Check for fetch-specific errors like ECONNREFUSED\n     if (errorMessage.includes('ECONNREFUSED') || errorMessage.includes('fetch failed')) {\n        return { error: `Could not connect to the backend service at ${BACKEND_URL}. Is it running?` };\n     }\n     return { error: `Failed to communicate with backend: ${errorMessage}` };\n  }\n}\n\n\n// --- New Server Actions for History/Status ---\n\nexport type ExecutionStatus = 'pending' | 'running' | 'completed' | 'failed';\n\nexport interface ExecutionHistoryItem {\n  job_id: string; // Matches backend field name\n  repo_url: string; // Matches backend field name\n  start_time: string; // Keep as string for transfer\n  end_time?: string; // Keep as string for transfer\n  status: ExecutionStatus;\n  details?: string;\n  final_state_summary?: {\n     documentation_plan?: any[]; // Adjust types as needed\n     summary_status?: string;\n  };\n}\n\n\nexport async function fetchExecutionHistory(): Promise<ExecutionHistoryItem[] | { error: string }> {\n  console.log('[Server Action] Fetching execution history from backend');\n  try {\n    const response = await fetch(`${BACKEND_URL}/history`, {\n       method: 'GET',\n       cache: 'no-store', // Ensure fresh data\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n       console.error(`Backend Error (${response.status}): ${data.error || 'Unknown error'}`);\n       return { error: `Backend Error: ${data.error || response.statusText || 'Failed to fetch history'}` };\n    }\n\n    // Basic validation if needed\n    if (!Array.isArray(data)) {\n        console.error('Backend returned non-array for history:', data);\n        return { error: 'Invalid history format received from backend.' };\n    }\n\n    // Convert snake_case from Python to camelCase for TypeScript if necessary\n    // Or adjust the frontend component to expect snake_case\n    // For simplicity, let's assume the component handles snake_case for now.\n    return data as ExecutionHistoryItem[];\n\n  } catch (error) {\n    console.error('[Server Action] Error fetching history:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Network error or backend unreachable.';\n    if (errorMessage.includes('ECONNREFUSED') || errorMessage.includes('fetch failed')) {\n       return { error: `Could not connect to the backend service at ${BACKEND_URL}. Is it running?` };\n    }\n    return { error: `Failed to fetch history: ${errorMessage}` };\n  }\n}\n\nexport async function fetchJobStatus(jobId: string): Promise<ExecutionHistoryItem | { error: string }> {\n  console.log(`[Server Action] Fetching status for job: ${jobId}`);\n   if (!jobId) return { error: 'Job ID is required.'};\n\n  try {\n    const response = await fetch(`${BACKEND_URL}/status/${jobId}`, {\n      method: 'GET',\n      cache: 'no-store', // Ensure fresh data\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n       console.error(`Backend Error (${response.status}): ${data.error || 'Unknown error'}`);\n       if (response.status === 404) {\n           return { error: `Job with ID ${jobId} not found.` };\n       }\n       return { error: `Backend Error: ${data.error || response.statusText || 'Failed to fetch status'}` };\n    }\n\n     // Assume data matches ExecutionHistoryItem structure (with snake_case)\n    return data as ExecutionHistoryItem;\n\n  } catch (error) {\n    console.error('[Server Action] Error fetching job status:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Network error or backend unreachable.';\n     if (errorMessage.includes('ECONNREFUSED') || errorMessage.includes('fetch failed')) {\n        return { error: `Could not connect to the backend service at ${BACKEND_URL}. Is it running?` };\n     }\n    return { error: `Failed to fetch status for job ${jobId}: ${errorMessage}` };\n  }\n}\n"],"names":[],"mappings":";;;;;;IAKsB,4BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/components/repo-input-form.tsx"],"sourcesContent":["'use client';\n\nimport type * as React from 'react';\nimport { useState } from 'react';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { Github, Loader2, FolderGit2 } from 'lucide-react'; // Added FolderGit2\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { startDocumentationProcess } from '@/app/actions'; // Import the server action\n\n// Allow local paths for demonstration, adjust validation as needed\n// Basic check for something that looks like a path or a git URL\n// WARNING: This is very basic and doesn't guarantee a valid repo/path.\n// More robust validation (e.g., checking for `.git` suffix for URLs) might be needed.\nconst formSchema = z.object({\n  repoUrl: z\n    .string()\n    .min(1, { message: 'Repository URL or local path is required.' })\n    // Example: Allows common Git URLs and basic paths (absolute or relative)\n    // This regex is permissive and mainly checks for non-empty string.\n    .refine(value => value.trim().length > 0, {\n        message: \"Repository URL or local path cannot be empty.\"\n    }),\n    // .regex(/^(?:https?:\\/\\/|git@)?(?:[\\w.-]+@)?[\\w.-]+\\/[\\w.-]+\\/?(?:\\.git)?$|^[\\\\\\/a-zA-Z0-9_\\-.]+$/, {\n    //   message: 'Please enter a valid Git repository URL or a local path.',\n    // }),\n});\n\ninterface RepoInputFormProps {\n    onJobSubmitted?: () => void; // Callback prop\n}\n\n\nexport function RepoInputForm({ onJobSubmitted }: RepoInputFormProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      repoUrl: '',\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsLoading(true);\n    try {\n      const repoInput = values.repoUrl;\n      console.log('Submitting repo input:', repoInput);\n\n      // Call the server action directly\n      const result = await startDocumentationProcess(repoInput);\n\n      if ('error' in result) {\n          throw new Error(result.error); // Throw error to be caught below\n      }\n\n      // Handle success\n      toast({\n        title: 'Documentation Job Submitted',\n        description: `Processing started for ${repoInput}. Job ID: ${result.job_id}. Check history below for updates.`,\n        duration: 5000, // Show for 5 seconds\n      });\n      form.reset(); // Reset form on successful submission\n\n      // Call the callback function if provided\n      onJobSubmitted?.();\n\n    } catch (error) {\n      console.error('Error submitting documentation job:', error);\n      const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n      toast({\n        variant: 'destructive',\n        title: 'Submission Failed',\n        description: `${errorMessage}`,\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <Card className=\"w-full max-w-lg shadow-md\">\n       <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          {/* Use appropriate icon based on input? Maybe too complex. Stick with generic repo icon */}\n          <FolderGit2 className=\"h-6 w-6 text-primary\" />\n          Document Repository\n        </CardTitle>\n         <CardDescription>\n           Enter a GitHub repository URL or a local path to start the automated documentation process.\n         </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"repoUrl\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel htmlFor=\"repoUrl\">Repository URL or Local Path</FormLabel>\n                  <FormControl>\n                    <Input\n                      id=\"repoUrl\"\n                      placeholder=\"https://github.com/user/repo or /path/to/local/repo\"\n                      {...field}\n                      aria-describedby=\"repoUrl-message\"\n                      disabled={isLoading}\n                    />\n                  </FormControl>\n                  <FormMessage id=\"repoUrl-message\" />\n                </FormItem>\n              )}\n            />\n            <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Submitting...\n                </>\n              ) : (\n                'Generate Documentation'\n              )}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 597, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 707, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 749, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/components/ui/scroll-area.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,0KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,4BAA4B;QACzC,GAAG,KAAK;;0BAET,8OAAC,0KAAA,CAAA,WAA4B;gBAAC,WAAU;0BACrC;;;;;;0BAEH,8OAAC;;;;;0BACD,8OAAC,0KAAA,CAAA,SAA0B;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,0KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,cAAc,UAAU,EAAE,GAAG,OAAO,EAAE,oBACpD,8OAAC,0KAAA,CAAA,sBAAuC;QACtC,KAAK;QACL,aAAa;QACb,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iDACA,gBAAgB,cACd,sDACF,gBAAgB,gBACd,wDACF;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,0KAAA,CAAA,kBAAmC;YAAC,WAAU;;;;;;;;;;;AAGnD,UAAU,WAAW,GAAG,0KAAA,CAAA,sBAAuC,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 817, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/components/ui/skeleton.tsx"],"sourcesContent":["import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n"],"names":[],"mappings":";;;;AAAA;;;AAEA,SAAS,SAAS,EAChB,SAAS,EACT,GAAG,OACkC;IACrC,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,qCAAqC;QAClD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 841, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/components/ui/tooltip.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,kBAAkB,mKAAA,CAAA,WAAyB;AAEjD,MAAM,UAAU,mKAAA,CAAA,OAAqB;AAErC,MAAM,iBAAiB,mKAAA,CAAA,UAAwB;AAE/C,MAAM,+BAAiB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGpC,CAAC,EAAE,SAAS,EAAE,aAAa,CAAC,EAAE,GAAG,OAAO,EAAE,oBAC1C,8OAAC,mKAAA,CAAA,UAAwB;QACvB,KAAK;QACL,YAAY;QACZ,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sYACA;QAED,GAAG,KAAK;;;;;;AAGb,eAAe,WAAW,GAAG,mKAAA,CAAA,UAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 877, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/app/actions.ts"],"sourcesContent":["'use server';\n\nconst BACKEND_URL = process.env.BACKEND_API_URL || 'http://127.0.0.1:5001'; // Default backend URL\n\n// This is the server action that will be called from the client component.\nexport async function startDocumentationProcess(repoUrl: string): Promise<{ job_id: string } | { error: string }> {\n  console.log(`[Server Action] Triggering backend documentation for: ${repoUrl}`);\n\n  try {\n    const response = await fetch(`${BACKEND_URL}/document`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ repoUrl }), // Send repoUrl in the body\n      cache: 'no-store', // Ensure fresh request\n    });\n\n    const result = await response.json();\n\n    if (!response.ok) {\n      // If response is not OK, throw an error with the message from the backend\n      console.error(`Backend Error (${response.status}): ${result.error || 'Unknown error'}`);\n      return { error: `Backend Error: ${result.error || response.statusText || 'Failed to start process'}` };\n    }\n\n    console.log('[Server Action] Backend responded:', result);\n    // Assuming the backend returns { job_id: \"...\", status: \"...\", message: \"...\" } on success (202)\n    if (result.job_id) {\n       return { job_id: result.job_id };\n    } else {\n       console.error('Backend did not return a job_id');\n       return { error: 'Backend did not return a job ID.' };\n    }\n\n  } catch (error) {\n    console.error('[Server Action] Error calling backend:', error);\n     const errorMessage = error instanceof Error ? error.message : 'Network error or backend unreachable.';\n     // Check for fetch-specific errors like ECONNREFUSED\n     if (errorMessage.includes('ECONNREFUSED') || errorMessage.includes('fetch failed')) {\n        return { error: `Could not connect to the backend service at ${BACKEND_URL}. Is it running?` };\n     }\n     return { error: `Failed to communicate with backend: ${errorMessage}` };\n  }\n}\n\n\n// --- New Server Actions for History/Status ---\n\nexport type ExecutionStatus = 'pending' | 'running' | 'completed' | 'failed';\n\nexport interface ExecutionHistoryItem {\n  job_id: string; // Matches backend field name\n  repo_url: string; // Matches backend field name\n  start_time: string; // Keep as string for transfer\n  end_time?: string; // Keep as string for transfer\n  status: ExecutionStatus;\n  details?: string;\n  final_state_summary?: {\n     documentation_plan?: any[]; // Adjust types as needed\n     summary_status?: string;\n  };\n}\n\n\nexport async function fetchExecutionHistory(): Promise<ExecutionHistoryItem[] | { error: string }> {\n  console.log('[Server Action] Fetching execution history from backend');\n  try {\n    const response = await fetch(`${BACKEND_URL}/history`, {\n       method: 'GET',\n       cache: 'no-store', // Ensure fresh data\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n       console.error(`Backend Error (${response.status}): ${data.error || 'Unknown error'}`);\n       return { error: `Backend Error: ${data.error || response.statusText || 'Failed to fetch history'}` };\n    }\n\n    // Basic validation if needed\n    if (!Array.isArray(data)) {\n        console.error('Backend returned non-array for history:', data);\n        return { error: 'Invalid history format received from backend.' };\n    }\n\n    // Convert snake_case from Python to camelCase for TypeScript if necessary\n    // Or adjust the frontend component to expect snake_case\n    // For simplicity, let's assume the component handles snake_case for now.\n    return data as ExecutionHistoryItem[];\n\n  } catch (error) {\n    console.error('[Server Action] Error fetching history:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Network error or backend unreachable.';\n    if (errorMessage.includes('ECONNREFUSED') || errorMessage.includes('fetch failed')) {\n       return { error: `Could not connect to the backend service at ${BACKEND_URL}. Is it running?` };\n    }\n    return { error: `Failed to fetch history: ${errorMessage}` };\n  }\n}\n\nexport async function fetchJobStatus(jobId: string): Promise<ExecutionHistoryItem | { error: string }> {\n  console.log(`[Server Action] Fetching status for job: ${jobId}`);\n   if (!jobId) return { error: 'Job ID is required.'};\n\n  try {\n    const response = await fetch(`${BACKEND_URL}/status/${jobId}`, {\n      method: 'GET',\n      cache: 'no-store', // Ensure fresh data\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n       console.error(`Backend Error (${response.status}): ${data.error || 'Unknown error'}`);\n       if (response.status === 404) {\n           return { error: `Job with ID ${jobId} not found.` };\n       }\n       return { error: `Backend Error: ${data.error || response.statusText || 'Failed to fetch status'}` };\n    }\n\n     // Assume data matches ExecutionHistoryItem structure (with snake_case)\n    return data as ExecutionHistoryItem;\n\n  } catch (error) {\n    console.error('[Server Action] Error fetching job status:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Network error or backend unreachable.';\n     if (errorMessage.includes('ECONNREFUSED') || errorMessage.includes('fetch failed')) {\n        return { error: `Could not connect to the backend service at ${BACKEND_URL}. Is it running?` };\n     }\n    return { error: `Failed to fetch status for job ${jobId}: ${errorMessage}` };\n  }\n}\n"],"names":[],"mappings":";;;;;;IAiEsB,wBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 890, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/app/actions.ts"],"sourcesContent":["'use server';\n\nconst BACKEND_URL = process.env.BACKEND_API_URL || 'http://127.0.0.1:5001'; // Default backend URL\n\n// This is the server action that will be called from the client component.\nexport async function startDocumentationProcess(repoUrl: string): Promise<{ job_id: string } | { error: string }> {\n  console.log(`[Server Action] Triggering backend documentation for: ${repoUrl}`);\n\n  try {\n    const response = await fetch(`${BACKEND_URL}/document`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ repoUrl }), // Send repoUrl in the body\n      cache: 'no-store', // Ensure fresh request\n    });\n\n    const result = await response.json();\n\n    if (!response.ok) {\n      // If response is not OK, throw an error with the message from the backend\n      console.error(`Backend Error (${response.status}): ${result.error || 'Unknown error'}`);\n      return { error: `Backend Error: ${result.error || response.statusText || 'Failed to start process'}` };\n    }\n\n    console.log('[Server Action] Backend responded:', result);\n    // Assuming the backend returns { job_id: \"...\", status: \"...\", message: \"...\" } on success (202)\n    if (result.job_id) {\n       return { job_id: result.job_id };\n    } else {\n       console.error('Backend did not return a job_id');\n       return { error: 'Backend did not return a job ID.' };\n    }\n\n  } catch (error) {\n    console.error('[Server Action] Error calling backend:', error);\n     const errorMessage = error instanceof Error ? error.message : 'Network error or backend unreachable.';\n     // Check for fetch-specific errors like ECONNREFUSED\n     if (errorMessage.includes('ECONNREFUSED') || errorMessage.includes('fetch failed')) {\n        return { error: `Could not connect to the backend service at ${BACKEND_URL}. Is it running?` };\n     }\n     return { error: `Failed to communicate with backend: ${errorMessage}` };\n  }\n}\n\n\n// --- New Server Actions for History/Status ---\n\nexport type ExecutionStatus = 'pending' | 'running' | 'completed' | 'failed';\n\nexport interface ExecutionHistoryItem {\n  job_id: string; // Matches backend field name\n  repo_url: string; // Matches backend field name\n  start_time: string; // Keep as string for transfer\n  end_time?: string; // Keep as string for transfer\n  status: ExecutionStatus;\n  details?: string;\n  final_state_summary?: {\n     documentation_plan?: any[]; // Adjust types as needed\n     summary_status?: string;\n  };\n}\n\n\nexport async function fetchExecutionHistory(): Promise<ExecutionHistoryItem[] | { error: string }> {\n  console.log('[Server Action] Fetching execution history from backend');\n  try {\n    const response = await fetch(`${BACKEND_URL}/history`, {\n       method: 'GET',\n       cache: 'no-store', // Ensure fresh data\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n       console.error(`Backend Error (${response.status}): ${data.error || 'Unknown error'}`);\n       return { error: `Backend Error: ${data.error || response.statusText || 'Failed to fetch history'}` };\n    }\n\n    // Basic validation if needed\n    if (!Array.isArray(data)) {\n        console.error('Backend returned non-array for history:', data);\n        return { error: 'Invalid history format received from backend.' };\n    }\n\n    // Convert snake_case from Python to camelCase for TypeScript if necessary\n    // Or adjust the frontend component to expect snake_case\n    // For simplicity, let's assume the component handles snake_case for now.\n    return data as ExecutionHistoryItem[];\n\n  } catch (error) {\n    console.error('[Server Action] Error fetching history:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Network error or backend unreachable.';\n    if (errorMessage.includes('ECONNREFUSED') || errorMessage.includes('fetch failed')) {\n       return { error: `Could not connect to the backend service at ${BACKEND_URL}. Is it running?` };\n    }\n    return { error: `Failed to fetch history: ${errorMessage}` };\n  }\n}\n\nexport async function fetchJobStatus(jobId: string): Promise<ExecutionHistoryItem | { error: string }> {\n  console.log(`[Server Action] Fetching status for job: ${jobId}`);\n   if (!jobId) return { error: 'Job ID is required.'};\n\n  try {\n    const response = await fetch(`${BACKEND_URL}/status/${jobId}`, {\n      method: 'GET',\n      cache: 'no-store', // Ensure fresh data\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n       console.error(`Backend Error (${response.status}): ${data.error || 'Unknown error'}`);\n       if (response.status === 404) {\n           return { error: `Job with ID ${jobId} not found.` };\n       }\n       return { error: `Backend Error: ${data.error || response.statusText || 'Failed to fetch status'}` };\n    }\n\n     // Assume data matches ExecutionHistoryItem structure (with snake_case)\n    return data as ExecutionHistoryItem;\n\n  } catch (error) {\n    console.error('[Server Action] Error fetching job status:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Network error or backend unreachable.';\n     if (errorMessage.includes('ECONNREFUSED') || errorMessage.includes('fetch failed')) {\n        return { error: `Could not connect to the backend service at ${BACKEND_URL}. Is it running?` };\n     }\n    return { error: `Failed to fetch status for job ${jobId}: ${errorMessage}` };\n  }\n}\n"],"names":[],"mappings":";;;;;;IAoGsB,iBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 903, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/components/execution-history.tsx"],"sourcesContent":["'use client';\n\nimport type * as React from 'react';\nimport { useState, useEffect, useCallback } from 'react';\nimport { Clock, CheckCircle, XCircle, Loader2, AlertTriangle } from 'lucide-react'; // Use AlertTriangle for errors\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n  TableCaption,\n} from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Button } from '@/components/ui/button'; // For refresh button\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'; // For tooltips\nimport { formatDistanceToNow, parseISO } from 'date-fns'; // parseISO for string dates\n\n// Import server actions and types\nimport { fetchExecutionHistory, fetchJobStatus, type ExecutionHistoryItem, type ExecutionStatus } from '@/app/actions';\nimport { useToast } from '@/hooks/use-toast';\n\n\n// Helper to format duration (handles string dates from backend)\nfunction formatDuration(startStr: string, endStr?: string): string {\n  try {\n    const start = parseISO(startStr);\n    if (!endStr) {\n        // Calculate duration from start to now if still running or pending\n        const now = new Date();\n        const durationSeconds = Math.round((now.getTime() - start.getTime()) / 1000);\n        if (durationSeconds < 0) return '-'; // Avoid negative duration if clocks are slightly off\n        if (durationSeconds < 60) return `${durationSeconds}s`;\n        const durationMinutes = Math.floor(durationSeconds / 60);\n        if (durationMinutes < 60) return `${durationMinutes}m ${durationSeconds % 60}s`;\n        const durationHours = Math.floor(durationMinutes / 60);\n        return `${durationHours}h ${durationMinutes % 60}m`;\n    }\n    const end = parseISO(endStr);\n    const durationSeconds = Math.round((end.getTime() - start.getTime()) / 1000);\n    if (durationSeconds < 0) return '-';\n    if (durationSeconds < 60) return `${durationSeconds}s`;\n    const durationMinutes = Math.floor(durationSeconds / 60);\n    if (durationMinutes < 60) return `${durationMinutes}m ${durationSeconds % 60}s`;\n    const durationHours = Math.floor(durationMinutes / 60);\n    return `${durationHours}h ${durationMinutes % 60}m`;\n  } catch (e) {\n    console.error(\"Error parsing date for duration:\", e);\n    return '-';\n  }\n}\n\n// Format start time string nicely\nfunction formatStartTime(startStr: string): string {\n    try {\n        const start = parseISO(startStr);\n        // Check if the date is recent (e.g., within last 7 days) for relative time\n        if (new Date().getTime() - start.getTime() < 7 * 24 * 60 * 60 * 1000) {\n            return formatDistanceToNow(start, { addSuffix: true });\n        }\n        // Otherwise, show absolute date/time\n        return start.toLocaleString();\n    } catch(e) {\n        console.error(\"Error parsing start time:\", e);\n        return startStr; // Return original string if parsing fails\n    }\n}\n\n\n// Map status to Badge variant and Icon\nconst statusMap: Record<\n  ExecutionStatus,\n  { variant: 'default' | 'secondary' | 'destructive' | 'outline'; Icon: React.ElementType }\n> = {\n  pending: { variant: 'outline', Icon: Clock },\n  running: { variant: 'secondary', Icon: Loader2 },\n  completed: { variant: 'default', Icon: CheckCircle }, // Using default (primary/teal) for completed\n  failed: { variant: 'destructive', Icon: XCircle },\n};\n\nconst POLLING_INTERVAL_MS = 5000; // Poll every 5 seconds\n\ninterface ExecutionHistoryProps {\n  refreshKey?: number; // Prop to trigger refresh\n}\n\nexport function ExecutionHistory({ refreshKey }: ExecutionHistoryProps) {\n  const [history, setHistory] = useState<ExecutionHistoryItem[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const loadHistory = useCallback(async (showLoading = true) => {\n    if (showLoading) setIsLoading(true);\n    setError(null);\n    console.log(\"Fetching execution history...\"); // Log fetch start\n    const result = await fetchExecutionHistory();\n    if ('error' in result) {\n      setError(result.error);\n      toast({\n        variant: 'destructive',\n        title: 'Failed to Load History',\n        description: result.error,\n      });\n       console.error(\"Error fetching history:\", result.error);\n    } else {\n      setHistory(result); // Assuming backend returns sorted data\n       console.log(\"History fetched successfully:\", result.length, \"items\");\n    }\n    if (showLoading) setIsLoading(false);\n  }, [toast]); // Added toast dependency\n\n  // Initial load and reload when refreshKey changes\n  useEffect(() => {\n    console.log(\"Effect triggered: Initial load or refreshKey changed\", refreshKey);\n    loadHistory();\n  }, [loadHistory, refreshKey]); // Add refreshKey to dependency array\n\n   // Polling mechanism for running jobs\n  useEffect(() => {\n    const runningJobIds = history.filter(job => job.status === 'running').map(job => job.job_id);\n\n    if (runningJobIds.length === 0) {\n      return; // No need to poll if no jobs are running\n    }\n\n    const intervalId = setInterval(async () => {\n        console.log(\"Polling for status updates...\", runningJobIds);\n        let historyUpdated = false;\n        for (const jobId of runningJobIds) {\n            const statusResult = await fetchJobStatus(jobId);\n            if (!('error' in statusResult)) {\n                 // Update the specific job in the history state\n                 setHistory(prevHistory => {\n                     const updated = prevHistory.map(job =>\n                         job.job_id === jobId ? statusResult : job\n                     );\n                     // Check if the status actually changed to avoid unnecessary re-renders if polling is fast\n                     const oldJob = prevHistory.find(j => j.job_id === jobId);\n                     if (oldJob?.status !== statusResult.status) {\n                         historyUpdated = true;\n                         if (statusResult.status === 'completed' || statusResult.status === 'failed') {\n                             toast({\n                                 title: `Job ${statusResult.status.toUpperCase()}`,\n                                 description: `Job for ${statusResult.repo_url.split('/').slice(-2).join('/')} finished.`,\n                             });\n                             console.log(`Job ${jobId} finished with status: ${statusResult.status}`);\n                         }\n                     }\n                     return updated;\n                 });\n            } else {\n                // Handle error fetching status for a specific job (e.g., log it)\n                console.warn(`Polling failed for job ${jobId}: ${statusResult.error}`);\n            }\n        }\n\n    }, POLLING_INTERVAL_MS);\n\n    // Cleanup function to clear the interval when the component unmounts\n    // or when the list of running jobs changes\n    return () => {\n        console.log(\"Clearing polling interval.\");\n        clearInterval(intervalId);\n    };\n  }, [history, toast]); // Rerun effect if history changes (e.g., job status updates)\n\n  const renderSkeleton = () => (\n    <>\n      {[...Array(3)].map((_, i) => (\n        <TableRow key={`skel-${i}`}>\n          <TableCell><Skeleton className=\"h-4 w-3/4\" /></TableCell>\n          <TableCell><Skeleton className=\"h-4 w-1/2\" /></TableCell>\n          <TableCell><Skeleton className=\"h-4 w-1/4\" /></TableCell>\n          <TableCell><Skeleton className=\"h-4 w-1/4\" /></TableCell>\n          <TableCell><Skeleton className=\"h-4 w-full\" /></TableCell>\n        </TableRow>\n      ))}\n    </>\n  );\n\n  return (\n    <Card className=\"w-full mt-8 shadow-md\">\n       <CardHeader className=\"flex flex-row items-center justify-between\">\n         <div>\n             <CardTitle className=\"flex items-center gap-2\">\n               <Clock className=\"h-6 w-6 text-primary\" />\n               Execution History\n             </CardTitle>\n             <CardDescription>\n               Track the progress and status of your documentation jobs. Running jobs update automatically.\n             </CardDescription>\n         </div>\n         <Button variant=\"outline\" size=\"sm\" onClick={() => loadHistory(true)} disabled={isLoading}>\n             <Loader2 className={`mr-2 h-4 w-4 ${isLoading ? 'animate-spin' : 'hidden'}`} />\n            Refresh\n          </Button>\n      </CardHeader>\n      <CardContent>\n         {error && (\n             <div className=\"flex items-center justify-center p-4 text-destructive bg-destructive/10 rounded-md border border-destructive/30\">\n                 <AlertTriangle className=\"h-5 w-5 mr-2\" />\n                 <span>Error loading history: {error}</span>\n            </div>\n         )}\n        <ScrollArea className={`h-[400px] w-full rounded-md border ${error ? 'mt-4' : ''}`}>\n         <TooltipProvider>\n          <Table>\n             {(isLoading && history.length === 0) && (\n                <TableCaption>Loading history...</TableCaption>\n             )}\n             {(!isLoading && !error && history.length === 0) && (\n                <TableCaption>No documentation history yet. Submit a repository above.</TableCaption>\n             )}\n            <TableHeader>\n              <TableRow>\n                <TableHead>Repository / Path</TableHead>\n                <TableHead>Started</TableHead>\n                <TableHead>Duration</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Details</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {isLoading && history.length === 0 ? renderSkeleton() : (\n                history.map((item) => {\n                  const { Icon, variant } = statusMap[item.status] || statusMap.pending; // Default to pending if status unknown\n                  const repoName = item.repo_url.includes('/')\n                        ? item.repo_url.split('/').slice(-2).join('/') // Extract user/repo for URL\n                        : item.repo_url; // Show full path if local\n\n                  return (\n                    <TableRow key={item.job_id}>\n                       <TableCell className=\"font-medium truncate max-w-xs\">\n                         <Tooltip>\n                           <TooltipTrigger asChild>\n                             <span>{repoName}</span>\n                           </TooltipTrigger>\n                           <TooltipContent>\n                             <p>{item.repo_url}</p>\n                           </TooltipContent>\n                         </Tooltip>\n                       </TableCell>\n                       <TableCell>\n                         <Tooltip>\n                           <TooltipTrigger asChild>\n                               <span>{formatStartTime(item.start_time)}</span>\n                            </TooltipTrigger>\n                           <TooltipContent>\n                             <p>{new Date(item.start_time).toLocaleString()}</p>\n                           </TooltipContent>\n                         </Tooltip>\n                        </TableCell>\n                      <TableCell>{formatDuration(item.start_time, item.end_time)}</TableCell>\n                      <TableCell>\n                        <Badge variant={variant} className=\"flex items-center gap-1 capitalize\">\n                          <Icon className={`h-3 w-3 ${item.status === 'running' ? 'animate-spin' : ''}`} />\n                          {item.status}\n                        </Badge>\n                      </TableCell>\n                       <TableCell className=\"text-sm text-muted-foreground truncate max-w-md\">\n                         <Tooltip>\n                             <TooltipTrigger asChild>\n                                 <span>{item.details || '-'}</span>\n                             </TooltipTrigger>\n                            {item.details && ( // Only show tooltip if there are details\n                                 <TooltipContent>\n                                     <p className=\"max-w-xs whitespace-normal\">{item.details}</p>\n                                 </TooltipContent>\n                             )}\n                         </Tooltip>\n                        </TableCell>\n                    </TableRow>\n                  );\n                })\n              )}\n               {/* Show skeleton rows below existing data when refreshing */}\n               {isLoading && history.length > 0 && renderSkeleton()}\n            </TableBody>\n          </Table>\n          </TooltipProvider>\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1535, "column": 0}, "map": {"version":3,"sources":["file:///Users/narender/Desktop/personal/studio/frontend/src/app/page.tsx"],"sourcesContent":["\n'use client'; // Make the page a client component to manage state\n\nimport { useState, useCallback } from 'react';\nimport { RepoInputForm } from '@/components/repo-input-form';\nimport { ExecutionHistory } from '@/components/execution-history';\n\nexport default function Home() {\n  // State to trigger refresh in ExecutionHistory\n  const [refreshKey, setRefreshKey] = useState(0);\n\n  // Callback function to trigger refresh\n  const triggerRefresh = useCallback(() => {\n    console.log('Triggering history refresh from page...');\n    setRefreshKey(prevKey => prevKey + 1);\n  }, []);\n\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-start p-8 md:p-16 lg:p-24 bg-background\">\n      <div className=\"w-full max-w-6xl flex flex-col items-center space-y-12\">\n        <header className=\"text-center\">\n           <h1 className=\"text-4xl font-bold text-primary tracking-tight mb-2\">\n             GitDocu\n           </h1>\n           <p className=\"text-xl text-foreground/80\">\n             AI-Powered Git Repository Documentation\n           </p>\n        </header>\n\n        {/* Pass the triggerRefresh callback to the form */}\n        <RepoInputForm onJobSubmitted={triggerRefresh} />\n\n        {/* Pass the refreshKey to ExecutionHistory to trigger re-fetching */}\n        <ExecutionHistory refreshKey={refreshKey} />\n\n      </div>\n       <footer className=\"mt-16 text-center text-muted-foreground text-sm\">\n          Powered by Google ADK & Next.js\n        </footer>\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AAJA,cAAc,mDAAmD;;;;;AAMlD,SAAS;IACtB,+CAA+C;IAC/C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE7C,uCAAuC;IACvC,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACjC,QAAQ,GAAG,CAAC;QACZ,cAAc,CAAA,UAAW,UAAU;IACrC,GAAG,EAAE;IAEL,qBACE,8OAAC;QAAK,WAAU;;0BACd,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAO,WAAU;;0CACf,8OAAC;gCAAG,WAAU;0CAAsD;;;;;;0CAGpE,8OAAC;gCAAE,WAAU;0CAA6B;;;;;;;;;;;;kCAM7C,8OAAC,2IAAA,CAAA,gBAAa;wBAAC,gBAAgB;;;;;;kCAG/B,8OAAC,0IAAA,CAAA,mBAAgB;wBAAC,YAAY;;;;;;;;;;;;0BAG/B,8OAAC;gBAAO,WAAU;0BAAkD;;;;;;;;;;;;AAK3E","debugId":null}}]
}